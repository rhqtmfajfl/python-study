0603
오후 수업



4-1 기본 Areaplo

x = np.arange(1,21) # 1~20 까지 정수 배열 생성
y = np.random.randint(low = 5, high =10, size =20)

#fill_between으로 색칠하기
#lineplot과 사요방법은 똑같으나, 밑을 채워주는 점이 차이점

plt.fill_between(x, y, color='red', alpha = 0.8) #x축 데이터 y 축데이터 color 색, alpha 투명도 .6 가능 == 0.6

plt.show()



4-2
#4-2 경계선을 굵게, area는 옅게 표현해 보기


plt.fill_between(x, y, color ='skyblue', alpha = .3)
plt.plot(x, y, color ='skyblue', alpha = .8)
plt.show()

line  style 과 같게 밑에 하나를더 얹어 주기 위해서는 밑에 하나를 더 사용한다.


plt.plot




4-3
여러 그래프를 겹쳐서 표현

x = np.arange(1, 10, 0.05) #np.linspace
y1 = np.cos(x) +1
y2 = np.sin(x) +1
y3 = y1 * y2 /np.pi

plt.fill_between(x, y1, color ='green' , alpha=0.1)
plt.fill_between(x, y2, color ='blue' , alpha=0.5)
plt.fill_between(x, y3, color ='skyblue' , alpha =0.8)


[ ]
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
[ ]
plt.rcParams['axes.unicode_minus'] = False # 한글 폰트로 설정 했을 때 음수 기호가 깨지는 것을 방지
plt.rcParams['figure.figsize'] = (8, 5)
1. Scatter
1-1. x, y, colors, area 설정하기
colors : 어떠한 정수 값을 색상으로 표현해 줍니다.
area : 점의 크기. 값이 커지면 점이 커집니다.
[ ]
x = np.random.rand(50)
y = np.random.rand(50)

colors = np.arange(50)
area = x * y * 1000
[ ]
plt.scatter(x, y, s=area, c=colors) # s : 점의 크기, c : 점의 색상
plt.show()


1-2. cmap, alpha
cmap에 컬러를 지정하면, 컬러 값을 모두 동일하게 설정
alpha는 투명도를 나타내며, 0~1사이의 값을 갖고, 0에 가까울 수록 투명해진다.
[ ]
# 현재 사용할 figure에 대해서만 크기 조절하기.
plt.figure(figsize=(12, 6))

plt.subplot(131)
plt.scatter(x, y, s=area, cmap='blue', alpha=0.1)
plt.title('alpha=0.1')

plt.subplot(132)
plt.scatter(x, y, s=area, cmap='blue', alpha=0.5)
plt.title('alpha=0.5')



2. Barplot, Barhplot
2-1. 기본 Barplot 그리기
[ ]
x = ["Math", "Programming", "Science", "English", "PE"]
y = [70, 80, 60, 40, 50]

plt.bar(x, y)
###
plt.xticks(x) # 카테고리를 설정하는 것.
###
plt.xlabel("Subjects")
plt.ylabel("Score")




2-2. Barhplot
barh함수에서는 xticks로 설정했던 카테고리 부분이 yticks로 변경되어야 한다.

[ ]
x = ["Math", "Programming", "Science", "English", "PE"]
y = [70, 80, 60, 40, 50]

plt.barh(x, y)
###
plt.yticks(x)
###
plt.show()


[번외] Barplot에서 비교 그래프 그리기
하나의 캔버스에 2개이상의 Bar 그리기
[ ]
x_label = ["Math", "Programming", "Science", "English", "PE"]
x = np.arange(len(x_label)) # 실제 label의 개수만큼 정수 배열 생성

y_1 = [70, 80, 60, 40, 50] # 첫 번째 사람의 점수
y_2 = [100, 60, 90, 45, 90] # 두 번째 사람의 점수

fig, axes = plt.subplots() # 1, 1 형태의 ax 하나 생성.

# bar의 넓이 넓이 지정
width = 0.35



[ ]
x_label = ["Math", "Programming", "Science", "English", "PE"]
x = np.arange(len(x_label)) # 실제 label의 개수만큼 정수 배열 생성

y_1 = [70, 80, 60, 40, 50] # 첫 번째 사람의 점수
y_2 = [100, 60, 90, 45, 90] # 두 번째 사람의 점수

fig, axes = plt.subplots() # 1, 1 형태의 ax 하나 생성.

# bar의 넓이 넓이 지정
width = 0.35



3. Line Plot
3-1. 기본 lineplot 그리기
[ ]
x = np.arange(0, 10, 0.1)
y = 1 + np.sin(x)

plt.plot(x, y)

plt.grid() # grid 표시
plt.show()


3-2. 2개 이상의 그래프 그리기
color, alpha 추가
[ ]
x = np.arange(0, 10, 0.1)
y_1 = 1 + np.sin(x)
y_2 = 1 + np.cos(x)

plt.plot(x, y_1, color='blue', alpha=0.3, label="1+sin")
plt.plot(x, y_2, color='red', alpha=0.7, label="1+cos")

plt.grid()
plt.legend()
plt.show()


marker 추가
[ ]
x = np.arange(0, 10, 0.1)
y_1 = 1 + np.sin(x)
y_2 = 1 + np.cos(x)

plt.plot(x, y_1, color='blue', alpha=0.3, label="1+sin")
plt.plot(x, y_2, color='red', alpha=0.7, label="1+cos")

plt.grid()
plt.legend()
plt.show()


linestyle 변경
[ ]
x = np.arange(0, 10, 0.1)
y_1 = 1 + np.sin(x)
y_2 = 1 + np.cos(x)

plt.plot(x, y_1, color='blue', alpha=0.3, label="1+sin", linestyle="-.")
plt.plot(x, y_2, color='red', alpha=0.7,  label="1+cos", linestyle=":")

plt.grid()
plt.legend()
plt.show()


4-1. 기본 Areaplot
[ ]
x = np.arange(1, 21) # 1 ~ 20 까지 정수 배열 생성
y = np.random.randint(low=5, high=10, size=20)

# fill_between으로 색칠하기
# lineplot과 사용방법은 똑같으나, 밑을 채워주는 점이 차이점
plt.fill_between(x, y, color='green', alpha=0.6)
plt.show()


4-2. 경계선을 굵게, area는 옅게 표현해 보기
[ ]
plt.fill_between(x, y, color='green', alpha=0.3)
plt.plot(x, y, color='green', alpha=0.8)
plt.show()


여러 그래프를 겹쳐서 표현
[ ]
x = np.arange(1, 10, 0.05) # np.linspace
y_1 = np.cos(x) + 1
y_2 = np.sin(x) + 1
y_3 = y_1 * y_2 / np.pi

plt.fill_between(x, y_1, color='green', alpha=0.1)
plt.fill_between(x, y_2, color='blue', alpha=0.2)
plt.fill_between(x, y_3, color='red', alpha=0.3)

plt.show()








5. Histogram

5-1. 기본 histogram



#5-1 기본histogram

N = 100000
bins = 30

x= np.random.randn(N)

plt.hist(x, bins = bins) # ㅛ축이 필요없는 이유? 히스토그램은 기본적으로 y축이 구간별 count를 의미하기 때문에
plt.show()


#bins에따라서 크기가 커지면 밑으로 높이가 낮아진다.


오후 2:23 2021-06-03

#5-2 다중 히스토그램 그려보기





N = 100000
bins = 30

x= np.random.randn(N)

fig, axes = plt.subplots(1, 3,
                         sharey=True,  #y축의 모든 값을 고유하겠다. y축 그래프를 다중 그래프가 공유
                         tight_layout=True) #그래프의 패딩을 자동으로 조절해서 fit한 graph를 생성


fig.set_size_inches(12 ,5) # set_size_inches 사이즈 조절

axes[0].hist(x, bins=bins)
axes[1].hist(x, bins=bins * 2)
axes[2].hist(x, bins=bins * 4)

plt.show()





5-3 y축에 Density 표기


N = 100000
bins = 30

x = np.random.randn(N)

fig,axes = plt.subplots(1, 2,
                        tight_layout=True)

fig.set_size_inches(9, 3)

# density=True 값을 통하여 Y축에 Density를 표기할 수 있다.
axes[0].hist(x, bins=bins, density=True, cumulative=True) # cumulative : 빈도수 누적합
axes[1].hist(x, bins=bins, density=True)

plt.show()






#######################################################


6. pie chart

6. Pie Chart
explode : 파이에서 툭 튀어져 나온 비율
autopct : 퍼센트 자동으로 표기
shadow : 파이차트에 그림자 효과
startangle : 파이를 그리기 시작할 각도
pie차트를 활용하면 2가지 리턴을 받아요.

texts : label에 대한 텍스트 효과
autotexts : 파이 위에 그려지는 텍스트 효과


labels = ['A','B','C','D','E','F']
sizes = [20.4,15.8,10.5,9,7.6,36.7]
explode =(0.3,0,0,0,0,0) #튜블로만 준다. 그래프 툭튀어나온부분

#texts, autotexts 인자를 활용하여 텍스트 스타일링 적용

_, texts, autotexts = plt.pie(sizes,
                              labels=labels,
                              explode=explode,
                              autopct='%1.1f%%',
                              shadow=True,
                              startangle= 90)  # 여기서 _ , texts, autotexts 순서 외워야하낟.


plt.title('PIE CHART TEST')

#label 텍스트에 대한 스타일 적용
for t in texts:   
  t.set_fontsize(12)
  t.set_color('skyblue')  #파이차트의 글자색

#pie위의 텍스트에 대한 스타일 적용
for t in autotexts:
  t.set_color('white')
  t.set_fontsize(18)




###################################################

# 7. Box Plot



#기본 데이터 분포
spread = np.random.rand(50) * 100
center = np.ones(25) * 50

#윗쪽 아웃라이어 만들기
flier_high = np.random.rand(10) * 100 + 100#최대 200 최소 100

#아래쪽 아웃라이어 만들기
flier_low = np.random.rand(10) * -100 #최소 -100, 최대 0


#모든 데이터 합치기

data = np.concatenate([spread, center, flier_high, flier_low])
len(data)


7. boxplot 내가 공부한 부분
#기본 데이터 분포
spread = np.random.rand(50) * 100
center = np.ones(25) * 50


#윗쪽 아웃라이어 만들기
flier_high = np.random.rand(10) * 100 + 100#최대 200 최소 100

#아래쪽 아웃라이어 만들기
flier_low = np.random.rand(10) * -100 #최소 -100, 최대 0


#모든 데이터 합치기concatenate()

data = np.concatenate([spread, center, flier_high, flier_low])

print(spread)
print(center)
print(len(data))
print(len(spread))
print(len(center))
print(len(flier_high))
print(len(flier_low))


[17.45533382 21.45552177 51.29054246 95.3852928  39.09936583 28.28767356
 65.43253758 96.25802449 90.86565966 66.48216045 16.6670403   4.58407287
 10.11334445 78.13162391  2.33580868 49.91316459 71.30906824 74.99703893
 73.95851222 72.74642463 23.24882579 65.99683974 40.05967719  0.82998916
 68.36903979 76.97028433 44.24092535 16.71619139 71.2126317  68.68253571
 58.58844737 57.90814505 16.61163847 14.71465217 63.57102573 31.70208803
 72.95715702 61.73975288 34.92806368 41.93582127 57.5591489  10.42968874
 29.52729264 72.62169899 96.17853263 45.46128655 67.31169175 18.75070377
 20.9234387  90.23405832]
[50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50. 50.
 50. 50. 50. 50. 50. 50. 50.]
95
50
25
10
10



7-2 
7-2 다중 박스플롯 생성



spread = np.random.rand(50) * 100
center = np.ones(25) * 50
flier_high = np.random.rand(10) * 100 + 100
flier_low  = np.random.rand(10) * -100
data = np.concatenate([spread, center, flier_high, flier_low])

spread = np.random.randn(50) * 100
center = np.ones(25) * 40 # 중앙값을 약간 내려보기

flier_high = np.random.rand(10) * 100 + 100
flier_low  = np.random.rand(10) * -100

d2 = np.concatenate([spread, center, flier_high, flier_low])





data.shape, d2.shape



((95,), (95,))




data_re = data.reshape(-1, 1)
data_re


d2re= d2.reshape(-1,1)

d2re






final_data = [datare, d2re, d2re[::2,0]] #리스트로  첫번째 둡ㄴ째 세번째 박스플롯으로 나타낸다.


plt.boxplot(final_data)
plt.show()






vert=False 옵션을 통해 축 변경

plt.boxplot(final_data, vert=False)
plt.show()





7-4 outlier 마커 심볼, 컬러 변경


outlier_marker = {'markerfacecolor' : 'r', 'marker':'D'}
plt.boxplot(final_data, flierprops=outlier_marker)
plt.show()












 
