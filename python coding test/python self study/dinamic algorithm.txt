다이나믹 프로그래밍은 동적 계획법이라고도 부릅니다..

일반적인 프로그래밍 분야에서의 동적이란 어떤 의미 일까?

* 자료구조에서 동적 할당은 프로그래밍이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법을 의미합니다.

* 반면에 다이나믹 프로그래밍에서 다이나믹은 별다른 의미 없이 사용된 단어 입니다.


다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용 할 수 있다.

* 최적 부분구조
    큰 문제를 작은문제로 나눌 수 있으며, 작은 문제의 답을 모아서 큰 문제를 해결 할 수 있다.

    중복되는 부분 문제
        동일한 작은 문제를 반복적으로 해결해야 합니다.


* 피보나치 수열
    앞의 두수를 더한 값이 뒤에 있는 값이 된다.

    1,1,2,3,5,8,13,21,34,55,89

   점화식이란 인접한 항들 사이의 관계식을 의미

    피보나치 수열을 점화식으로 표현

    각각의 항이 인접한 다른 항과 관계가 될때 점화식이라 한다.

an = an-1 + an-2


시작부분에 대한 항의 값을 알고 있으면 모든 항의 값을 다 알 수 있다.


    피보나치 수열이 계산되는 과정

  -> tree로 표현 했을 때 

     f(4)를 구하기 위해서 f(3)과 f(2)를 알 고 있어야 한다.


-> 피보나치 수열: 단순 재귀 소스코드

#피보나치 함수을 재귀함수로 구현

def fibo(x):
    if x == 1 or x ==2:
        return
    return fibo(x-1) + fibo(x -2)

print(pibo(4))


#재귀함수가 무한루프를 돌지 않고 특정 지점에서 멈출 수 있도록 하는 것이 일반적이다.

#언제 재귀함수가 재귀적으로 호출 되지 않고 멈출지에 대해서 명시할 필요가 있다.



*피보나치 수열의 시간 복잡도 분석

    단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 됩니다.

다음과 같이 f(2)가 여러번 호출 되는 것을 확인 할 수 있다.

피보나치 수열의 시간 복잡도 분석

    세타 표기법
    
    빅오 표기법

* 피보 나치 수열의 효율적인 해결방법

    1. 최적 부분 구조 : 큰 문제를 작은 문제로 나눌 수 있따.

    2. 중복되는 부분 문제 동일한 작은 문제를 반복적으로 해결할 수있따.

피보나치 수열은 다이나믹 프로그래밍을 사용한다.


상향식 하향식

메모이제이션

한번 계산한 결과를 메모리공간에 메모 하는 기법

같은 문제를 다시 호출하면 메모했던 결과를그대로 ㅏ젼온다.

값을 기록해 놓는다는 점에서 캐싱이라고 한다.
    
사용하는 배열이름 캐시 테이블 디피 혹은 디라고 설정하낟.
탑다운 은 하향식이라고도 한다.


결과 저장용 리스트는 dp 테이블이라고 부릅니다.



메모이제이션이나믹 프로그래밍에 국한된것은 아니다

한번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있따.


피보나치 수열 탑다운 다이나믹 프로그래밍소스코드

#한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화

# 피보나치 함수를 재귀함수로 구현

d = [0] * 100

#피보나치 함수를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)

def fibo(x):
    
    #종료 조건(1 혹은 2일 때 1을 반환)
    if  x == 1 or x ==2:
        return 1
    #이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    #아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x - 2)
    return d[x]

print(fibo(99))

